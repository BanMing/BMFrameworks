//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BufferWriterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BufferWriter), typeof(System.Object));
		L.RegFunction("Write", Write);
		L.RegFunction("WriteSByte", WriteSByte);
		L.RegFunction("WriteByte", WriteByte);
		L.RegFunction("WriteShort", WriteShort);
		L.RegFunction("WriteUShort", WriteUShort);
		L.RegFunction("WriteInt", WriteInt);
		L.RegFunction("WriteUInt", WriteUInt);
		L.RegFunction("WriteLong", WriteLong);
		L.RegFunction("WriteULong", WriteULong);
		L.RegFunction("WriteFloat", WriteFloat);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("WriteBytes", WriteBytes);
		L.RegFunction("WriteUnicodeString", WriteUnicodeString);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("WriteBool", WriteBool);
		L.RegFunction("Clear", Clear);
		L.RegFunction("GetBuffer", GetBuffer);
		L.RegFunction("GetUsedSize", GetUsedSize);
		L.RegFunction("Create", Create);
		L.RegFunction("New", _CreateBufferWriter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("UsedLength", get_UsedLength, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateBufferWriter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				BufferWriter obj = new BufferWriter(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: BufferWriter.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferWriter), typeof(bool)))
			{
				BufferWriter obj = (BufferWriter)ToLua.ToObject(L, 1);
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferWriter), typeof(byte[])))
			{
				BufferWriter obj = (BufferWriter)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferWriter), typeof(double)))
			{
				BufferWriter obj = (BufferWriter)ToLua.ToObject(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(BufferWriter), typeof(byte[]), typeof(int), typeof(int)))
			{
				BufferWriter obj = (BufferWriter)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.Write(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BufferWriter.Write");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteSByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			sbyte arg0 = (sbyte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteSByte(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteShort(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUShort(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUInt(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteLong(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteULong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.WriteULong(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteFloat(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferWriter), typeof(byte[])))
			{
				BufferWriter obj = (BufferWriter)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.WriteBytes(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(BufferWriter), typeof(byte[]), typeof(int), typeof(int)))
			{
				BufferWriter obj = (BufferWriter)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.WriteBytes(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BufferWriter.WriteBytes");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUnicodeString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.WriteUnicodeString(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.WriteString(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.WriteBool(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			byte[] o = obj.GetBuffer();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUsedSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferWriter obj = (BufferWriter)ToLua.CheckObject(L, 1, typeof(BufferWriter));
			int o = obj.GetUsedSize();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			BufferWriter o = BufferWriter.Create(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UsedLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BufferWriter obj = (BufferWriter)o;
			int ret = obj.UsedLength;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UsedLength on a nil value" : e.Message);
		}
	}
}

