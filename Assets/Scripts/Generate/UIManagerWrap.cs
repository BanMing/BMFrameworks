//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIManager), typeof(System.Object));
		L.RegFunction("TriggerWindowCreateEvent", TriggerWindowCreateEvent);
		L.RegFunction("TriggerWindowDestroyEvent", TriggerWindowDestroyEvent);
		L.RegFunction("TriggerWindowShowEvent", TriggerWindowShowEvent);
		L.RegFunction("TriggerWindowHideEvent", TriggerWindowHideEvent);
		L.RegFunction("OpenWindow", OpenWindow);
		L.RegFunction("CloseWindow", CloseWindow);
		L.RegFunction("HideWindow", HideWindow);
		L.RegFunction("CloseAllWindow", CloseAllWindow);
		L.RegFunction("CloseAllWindowInRoot", CloseAllWindowInRoot);
		L.RegFunction("CloseAllWindowInTopRoot", CloseAllWindowInTopRoot);
		L.RegFunction("IsInit", IsInit);
		L.RegFunction("GetCamera", GetCamera);
		L.RegFunction("New", _CreateUIManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_CreateWindow", get_m_CreateWindow, set_m_CreateWindow);
		L.RegVar("m_DestroyWindow", get_m_DestroyWindow, set_m_DestroyWindow);
		L.RegVar("m_ShowWindow", get_m_ShowWindow, set_m_ShowWindow);
		L.RegVar("m_HideWindow", get_m_HideWindow, set_m_HideWindow);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("UIRoot", get_UIRoot, null);
		L.RegVar("UITopRoot", get_UITopRoot, null);
		L.RegVar("RootCanvas", get_RootCanvas, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUIManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UIManager obj = new UIManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UIManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TriggerWindowCreateEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			UIWindows arg1 = (UIWindows)ToLua.CheckUnityObject(L, 3, typeof(UIWindows));
			obj.TriggerWindowCreateEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TriggerWindowDestroyEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			UIWindows arg1 = (UIWindows)ToLua.CheckUnityObject(L, 3, typeof(UIWindows));
			obj.TriggerWindowDestroyEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TriggerWindowShowEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			UIWindows arg1 = (UIWindows)ToLua.CheckUnityObject(L, 3, typeof(UIWindows));
			obj.TriggerWindowShowEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TriggerWindowHideEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			UIWindows arg1 = (UIWindows)ToLua.CheckUnityObject(L, 3, typeof(UIWindows));
			obj.TriggerWindowHideEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(string)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.OpenWindow(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(string), typeof(UnityEngine.RectTransform)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.RectTransform arg1 = (UnityEngine.RectTransform)ToLua.ToObject(L, 3);
				obj.OpenWindow(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(string), typeof(bool)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.OpenWindow(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.OpenWindow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(string)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.CloseWindow(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(UnityEngine.GameObject)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.CloseWindow(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(string), typeof(UnityEngine.RectTransform)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.RectTransform arg1 = (UnityEngine.RectTransform)ToLua.ToObject(L, 3);
				obj.CloseWindow(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.CloseWindow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(string)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.HideWindow(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(UnityEngine.GameObject)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.HideWindow(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIManager), typeof(string), typeof(UnityEngine.RectTransform)))
			{
				UIManager obj = (UIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.RectTransform arg1 = (UnityEngine.RectTransform)ToLua.ToObject(L, 3);
				obj.HideWindow(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.HideWindow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseAllWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			obj.CloseAllWindow();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseAllWindowInRoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			obj.CloseAllWindowInRoot();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseAllWindowInTopRoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			obj.CloseAllWindowInTopRoot();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			bool o = obj.IsInit();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIManager obj = (UIManager)ToLua.CheckObject(L, 1, typeof(UIManager));
			UnityEngine.Camera o = obj.GetCamera();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_CreateWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			LuaInterface.LuaFunction ret = obj.m_CreateWindow;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_CreateWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_DestroyWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			LuaInterface.LuaFunction ret = obj.m_DestroyWindow;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_DestroyWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_ShowWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			LuaInterface.LuaFunction ret = obj.m_ShowWindow;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_ShowWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_HideWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			LuaInterface.LuaFunction ret = obj.m_HideWindow;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_HideWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UIManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			UnityEngine.RectTransform ret = obj.UIRoot;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UIRoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UITopRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			UnityEngine.RectTransform ret = obj.UITopRoot;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UITopRoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RootCanvas(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			UnityEngine.Canvas ret = obj.RootCanvas;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RootCanvas on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_CreateWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.m_CreateWindow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_CreateWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_DestroyWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.m_DestroyWindow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_DestroyWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_ShowWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.m_ShowWindow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_ShowWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_HideWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIManager obj = (UIManager)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.m_HideWindow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_HideWindow on a nil value" : e.Message);
		}
	}
}

