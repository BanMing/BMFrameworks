//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HTTPToolWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HTTPTool), typeof(System.Object));
		L.RegFunction("GetTexture", GetTexture);
		L.RegFunction("GetSprite", GetSprite);
		L.RegFunction("GetText", GetText);
		L.RegFunction("GetBytes", GetBytes);
		L.RegFunction("DownLoadFile", DownLoadFile);
		L.RegFunction("GetURL", GetURL);
		L.RegFunction("GetWWW", GetWWW);
		L.RegFunction("New", _CreateHTTPTool);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHTTPTool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				HTTPTool obj = new HTTPTool();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: HTTPTool.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<UnityEngine.Texture> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<UnityEngine.Texture>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Texture>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Texture>), func) as System.Action<UnityEngine.Texture>;
			}

			HTTPTool.GetTexture(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<UnityEngine.Sprite> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<UnityEngine.Sprite>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Sprite>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Sprite>), func) as System.Action<UnityEngine.Sprite>;
			}

			HTTPTool.GetSprite(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<string> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<string>)ToLua.CheckObject(L, 2, typeof(System.Action<string>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<string>), func) as System.Action<string>;
			}

			HTTPTool.GetText(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<byte[]> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<byte[]>)ToLua.CheckObject(L, 2, typeof(System.Action<byte[]>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<byte[]>), func) as System.Action<byte[]>;
			}

			HTTPTool.GetBytes(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownLoadFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			System.Action<bool> arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<bool>)ToLua.CheckObject(L, 4, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			HTTPTool.DownLoadFile(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetURL(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = HTTPTool.GetURL(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWWW(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.WWW o = HTTPTool.GetWWW(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

