//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MemoryInputStreamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MemoryInputStream), typeof(System.Object));
		L.RegFunction("PopByteArray", PopByteArray);
		L.RegFunction("IsEnd", IsEnd);
		L.RegFunction("New", _CreateMemoryInputStream);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMemoryInputStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				MemoryInputStream obj = new MemoryInputStream(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(int), typeof(int)))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				MemoryInputStream obj = new MemoryInputStream(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MemoryInputStream.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PopByteArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MemoryInputStream obj = (MemoryInputStream)ToLua.CheckObject(L, 1, typeof(MemoryInputStream));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte[] o = obj.PopByteArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MemoryInputStream obj = (MemoryInputStream)ToLua.CheckObject(L, 1, typeof(MemoryInputStream));
			bool o = obj.IsEnd();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

