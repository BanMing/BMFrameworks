//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_IPAddressWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Net.IPAddress), typeof(System.Object));
		L.RegFunction("HostToNetworkOrder", HostToNetworkOrder);
		L.RegFunction("NetworkToHostOrder", NetworkToHostOrder);
		L.RegFunction("Parse", Parse);
		L.RegFunction("TryParse", TryParse);
		L.RegFunction("GetAddressBytes", GetAddressBytes);
		L.RegFunction("IsLoopback", IsLoopback);
		L.RegFunction("ToString", ToString);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("New", _CreateSystem_Net_IPAddress);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Any", get_Any, null);
		L.RegVar("Broadcast", get_Broadcast, null);
		L.RegVar("Loopback", get_Loopback, null);
		L.RegVar("None", get_None, null);
		L.RegVar("IPv6Any", get_IPv6Any, null);
		L.RegVar("IPv6Loopback", get_IPv6Loopback, null);
		L.RegVar("IPv6None", get_IPv6None, null);
		L.RegVar("IsIPv6LinkLocal", get_IsIPv6LinkLocal, null);
		L.RegVar("IsIPv6SiteLocal", get_IsIPv6SiteLocal, null);
		L.RegVar("IsIPv6Multicast", get_IsIPv6Multicast, null);
		L.RegVar("ScopeId", get_ScopeId, set_ScopeId);
		L.RegVar("AddressFamily", get_AddressFamily, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Net_IPAddress(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(byte[])))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				System.Net.IPAddress obj = new System.Net.IPAddress(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(long)))
			{
				long arg0 = LuaDLL.tolua_checkint64(L, 1);
				System.Net.IPAddress obj = new System.Net.IPAddress(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(long)))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				long arg1 = LuaDLL.tolua_checkint64(L, 2);
				System.Net.IPAddress obj = new System.Net.IPAddress(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Net.IPAddress.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HostToNetworkOrder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			long o = System.Net.IPAddress.HostToNetworkOrder(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NetworkToHostOrder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			long o = System.Net.IPAddress.NetworkToHostOrder(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			System.Net.IPAddress o = System.Net.IPAddress.Parse(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryParse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Net.IPAddress arg1 = null;
			bool o = System.Net.IPAddress.TryParse(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushObject(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAddressBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.IPAddress obj = (System.Net.IPAddress)ToLua.CheckObject(L, 1, typeof(System.Net.IPAddress));
			byte[] o = obj.GetAddressBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsLoopback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.IPAddress arg0 = (System.Net.IPAddress)ToLua.CheckObject(L, 1, typeof(System.Net.IPAddress));
			bool o = System.Net.IPAddress.IsLoopback(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.IPAddress obj = (System.Net.IPAddress)ToLua.CheckObject(L, 1, typeof(System.Net.IPAddress));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.IPAddress obj = (System.Net.IPAddress)ToLua.CheckObject(L, 1, typeof(System.Net.IPAddress));
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.IPAddress obj = (System.Net.IPAddress)ToLua.CheckObject(L, 1, typeof(System.Net.IPAddress));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Any(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Net.IPAddress.Any);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Broadcast(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Net.IPAddress.Broadcast);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Loopback(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Net.IPAddress.Loopback);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Net.IPAddress.None);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IPv6Any(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Net.IPAddress.IPv6Any);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IPv6Loopback(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Net.IPAddress.IPv6Loopback);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IPv6None(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Net.IPAddress.IPv6None);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsIPv6LinkLocal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPAddress obj = (System.Net.IPAddress)o;
			bool ret = obj.IsIPv6LinkLocal;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsIPv6LinkLocal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsIPv6SiteLocal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPAddress obj = (System.Net.IPAddress)o;
			bool ret = obj.IsIPv6SiteLocal;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsIPv6SiteLocal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsIPv6Multicast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPAddress obj = (System.Net.IPAddress)o;
			bool ret = obj.IsIPv6Multicast;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsIPv6Multicast on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ScopeId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPAddress obj = (System.Net.IPAddress)o;
			long ret = obj.ScopeId;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ScopeId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AddressFamily(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPAddress obj = (System.Net.IPAddress)o;
			System.Net.Sockets.AddressFamily ret = obj.AddressFamily;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AddressFamily on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ScopeId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.IPAddress obj = (System.Net.IPAddress)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.ScopeId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ScopeId on a nil value" : e.Message);
		}
	}
}

