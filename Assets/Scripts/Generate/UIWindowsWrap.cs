//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIWindowsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIWindows), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("TriggerWindowShowEvent", TriggerWindowShowEvent);
		L.RegFunction("RegisterEventListener", RegisterEventListener);
		L.RegFunction("UnRegisterEventListener", UnRegisterEventListener);
		L.RegFunction("RegisterClickListener", RegisterClickListener);
		L.RegFunction("UnRegisterClickListener", UnRegisterClickListener);
		L.RegFunction("RegisterDoubleClickListener", RegisterDoubleClickListener);
		L.RegFunction("UnRegisterDoubleClickListener", UnRegisterDoubleClickListener);
		L.RegFunction("SetLabelText", SetLabelText);
		L.RegFunction("GetLabelText", GetLabelText);
		L.RegFunction("GetInputField", GetInputField);
		L.RegFunction("SetImage", SetImage);
		L.RegFunction("SetImageColor", SetImageColor);
		L.RegFunction("SetRawImage", SetRawImage);
		L.RegFunction("RegisterToggleValueChanged", RegisterToggleValueChanged);
		L.RegFunction("UnRegisterToggleValueChanged", UnRegisterToggleValueChanged);
		L.RegFunction("RegisterSliderValueChanged", RegisterSliderValueChanged);
		L.RegFunction("UnRegisterSliderValueChanged", UnRegisterSliderValueChanged);
		L.RegFunction("PlayTweenAnimation", PlayTweenAnimation);
		L.RegFunction("ShowChildNode", ShowChildNode);
		L.RegFunction("HideChildNode", HideChildNode);
		L.RegFunction("ShowNode", ShowNode);
		L.RegFunction("HideNode", HideNode);
		L.RegFunction("SetActive", SetActive);
		L.RegFunction("OpenWindow", OpenWindow);
		L.RegFunction("OpenWindowAndCloseSelf", OpenWindowAndCloseSelf);
		L.RegFunction("CloseWindow", CloseWindow);
		L.RegFunction("HideWindow", HideWindow);
		L.RegFunction("CloneNode", CloneNode);
		L.RegFunction("CloneUINode", CloneUINode);
		L.RegFunction("DestroyChildrenNode", DestroyChildrenNode);
		L.RegFunction("GetTransform", GetTransform);
		L.RegFunction("GetRectTransform", GetRectTransform);
		L.RegFunction("GetUIButton", GetUIButton);
		L.RegFunction("GetUIText", GetUIText);
		L.RegFunction("GetUIImage", GetUIImage);
		L.RegFunction("GetUIRawImage", GetUIRawImage);
		L.RegFunction("GetUIToggle", GetUIToggle);
		L.RegFunction("GetUISlider", GetUISlider);
		L.RegFunction("GetUIScrollRect", GetUIScrollRect);
		L.RegFunction("GetUIScrollbar", GetUIScrollbar);
		L.RegFunction("GetUIInputField", GetUIInputField);
		L.RegFunction("GetUIDropdown", GetUIDropdown);
		L.RegFunction("GetUICanvas", GetUICanvas);
		L.RegFunction("GetUICanvasScaler", GetUICanvasScaler);
		L.RegFunction("GetComponentByString", GetComponentByString);
		L.RegFunction("GenerateBindList", GenerateBindList);
		L.RegFunction("GetComponent", GetComponent);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_WindowName", get_m_WindowName, set_m_WindowName);
		L.RegVar("m_ListWidgetUnit", get_m_ListWidgetUnit, set_m_ListWidgetUnit);
		L.RegVar("IsTriggerShowEvent", get_IsTriggerShowEvent, set_IsTriggerShowEvent);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TriggerWindowShowEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			obj.TriggerWindowShowEvent();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterEventListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string), typeof(LuaInterface.LuaFunction)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				obj.RegisterEventListener(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(string), typeof(LuaInterface.LuaFunction)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				obj.RegisterEventListener(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string), typeof(LuaInterface.LuaFunction), typeof(LuaInterface.LuaTable)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				LuaTable arg3 = ToLua.ToLuaTable(L, 5);
				obj.RegisterEventListener(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(string), typeof(LuaInterface.LuaFunction), typeof(LuaInterface.LuaTable)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				LuaTable arg3 = ToLua.ToLuaTable(L, 5);
				obj.RegisterEventListener(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.RegisterEventListener");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnRegisterEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.UnRegisterEventListener(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterClickListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(LuaInterface.LuaFunction)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.RegisterClickListener(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(LuaInterface.LuaFunction)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.RegisterClickListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.RegisterClickListener");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnRegisterClickListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				obj.UnRegisterClickListener(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.UnRegisterClickListener(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.UnRegisterClickListener");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterDoubleClickListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(LuaInterface.LuaFunction)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.RegisterDoubleClickListener(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(LuaInterface.LuaFunction)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.RegisterDoubleClickListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.RegisterDoubleClickListener");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnRegisterDoubleClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			obj.UnRegisterDoubleClickListener(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLabelText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.SetLabelText(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.SetLabelText(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.SetLabelText");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLabelText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetLabelText(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInputField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetInputField(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(UnityEngine.Sprite)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				UnityEngine.Sprite arg1 = (UnityEngine.Sprite)ToLua.ToObject(L, 3);
				obj.SetImage(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(UnityEngine.Sprite)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Sprite arg1 = (UnityEngine.Sprite)ToLua.ToObject(L, 3);
				obj.SetImage(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(string), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				obj.SetImage(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				obj.SetImage(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string), typeof(string), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				string arg3 = ToLua.ToString(L, 5);
				obj.SetImage(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.SetImage");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImageColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(float), typeof(float), typeof(float)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.SetImageColor(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(float), typeof(float), typeof(float)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.SetImageColor(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(float), typeof(float), typeof(float), typeof(float)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
				obj.SetImageColor(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(float), typeof(float), typeof(float), typeof(float)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
				obj.SetImageColor(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.SetImageColor");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRawImage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(UnityEngine.Texture)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				obj.SetRawImage(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(UnityEngine.Texture)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				obj.SetRawImage(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.SetRawImage");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterToggleValueChanged(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(LuaInterface.LuaFunction)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.RegisterToggleValueChanged(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(LuaInterface.LuaFunction)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.RegisterToggleValueChanged(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.RegisterToggleValueChanged");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnRegisterToggleValueChanged(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				obj.UnRegisterToggleValueChanged(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.UnRegisterToggleValueChanged(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.UnRegisterToggleValueChanged");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterSliderValueChanged(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(LuaInterface.LuaFunction)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.RegisterSliderValueChanged(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(LuaInterface.LuaFunction)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.RegisterSliderValueChanged(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.RegisterSliderValueChanged");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnRegisterSliderValueChanged(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				obj.UnRegisterSliderValueChanged(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.UnRegisterSliderValueChanged(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.UnRegisterSliderValueChanged");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayTweenAnimation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(bool)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.PlayTweenAnimation(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(bool), typeof(bool)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				obj.PlayTweenAnimation(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.PlayTweenAnimation");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowChildNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			obj.ShowChildNode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideChildNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			obj.HideChildNode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			obj.ShowNode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			obj.HideNode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetActive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetActive(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			obj.OpenWindow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenWindowAndCloseSelf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			obj.OpenWindowAndCloseSelf(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				obj.CloseWindow();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.GameObject)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.CloseWindow(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.CloseWindow(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.CloseWindow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				obj.HideWindow();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.GameObject)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.HideWindow(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.HideWindow(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.HideWindow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloneNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Transform o = obj.CloneNode(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloneUINode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.RectTransform o = obj.CloneUINode(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyChildrenNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			obj.DestroyChildrenNode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Transform o = obj.GetTransform(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRectTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.RectTransform o = obj.GetRectTransform(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIButton(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.Button o = obj.GetUIButton(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.Button o = obj.GetUIButton(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUIButton");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.Text o = obj.GetUIText(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.Text o = obj.GetUIText(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUIText");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIImage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.Image o = obj.GetUIImage(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.Image o = obj.GetUIImage(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUIImage");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIRawImage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.RawImage o = obj.GetUIRawImage(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.RawImage o = obj.GetUIRawImage(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUIRawImage");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIToggle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.Toggle o = obj.GetUIToggle(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.Toggle o = obj.GetUIToggle(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUIToggle");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUISlider(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.Slider o = obj.GetUISlider(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.Slider o = obj.GetUISlider(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUISlider");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIScrollRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.ScrollRect o = obj.GetUIScrollRect(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.ScrollRect o = obj.GetUIScrollRect(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUIScrollRect");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIScrollbar(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.Scrollbar o = obj.GetUIScrollbar(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.Scrollbar o = obj.GetUIScrollbar(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUIScrollbar");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIInputField(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.InputField o = obj.GetUIInputField(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.InputField o = obj.GetUIInputField(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUIInputField");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIDropdown(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.Dropdown o = obj.GetUIDropdown(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.Dropdown o = obj.GetUIDropdown(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUIDropdown");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUICanvas(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Canvas o = obj.GetUICanvas(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Canvas o = obj.GetUICanvas(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUICanvas");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUICanvasScaler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.UI.CanvasScaler o = obj.GetUICanvasScaler(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.UI.CanvasScaler o = obj.GetUICanvasScaler(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetUICanvasScaler");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponentByString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(UnityEngine.Transform), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Component o = obj.GetComponentByString(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Component o = obj.GetComponentByString(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetComponentByString");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GenerateBindList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWindows obj = (UIWindows)ToLua.CheckObject(L, 1, typeof(UIWindows));
			obj.GenerateBindList();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(string)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Component o = obj.GetComponent(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIWindows), typeof(System.Type)))
			{
				UIWindows obj = (UIWindows)ToLua.ToObject(L, 1);
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 2);
				UnityEngine.Component o = obj.GetComponent(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIWindows.GetComponent");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_WindowName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWindows obj = (UIWindows)o;
			string ret = obj.m_WindowName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_WindowName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_ListWidgetUnit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWindows obj = (UIWindows)o;
			System.Collections.Generic.List<UIWindows.UIWidgetNameAndPathUnit> ret = obj.m_ListWidgetUnit;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_ListWidgetUnit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsTriggerShowEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWindows obj = (UIWindows)o;
			bool ret = obj.IsTriggerShowEvent;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsTriggerShowEvent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_WindowName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWindows obj = (UIWindows)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.m_WindowName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_WindowName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_ListWidgetUnit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWindows obj = (UIWindows)o;
			System.Collections.Generic.List<UIWindows.UIWidgetNameAndPathUnit> arg0 = (System.Collections.Generic.List<UIWindows.UIWidgetNameAndPathUnit>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UIWindows.UIWidgetNameAndPathUnit>));
			obj.m_ListWidgetUnit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_ListWidgetUnit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsTriggerShowEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIWindows obj = (UIWindows)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsTriggerShowEvent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsTriggerShowEvent on a nil value" : e.Message);
		}
	}
}

