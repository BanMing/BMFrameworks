//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CSVParserWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CSVParser), typeof(System.Object));
		L.RegFunction("ParseFile", ParseFile);
		L.RegFunction("ParseFromBuffer", ParseFromBuffer);
		L.RegFunction("ParseMacroFile", ParseMacroFile);
		L.RegFunction("ParseMacroFileData", ParseMacroFileData);
		L.RegFunction("GetRowSize", GetRowSize);
		L.RegFunction("GetColSize", GetColSize);
		L.RegFunction("GetString", GetString);
		L.RegFunction("GetInt", GetInt);
		L.RegFunction("GetUInt", GetUInt);
		L.RegFunction("GetFloat", GetFloat);
		L.RegFunction("GetDouble", GetDouble);
		L.RegFunction("GetBool", GetBool);
		L.RegFunction("Clear", Clear);
		L.RegFunction("New", _CreateCSVParser);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("SplitChar", get_SplitChar, set_SplitChar);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCSVParser(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				CSVParser obj = new CSVParser();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: CSVParser.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.ParseFile(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseFromBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.ParseFromBuffer(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseMacroFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = CSVParser.ParseMacroFile(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseMacroFileData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = CSVParser.ParseMacroFileData(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRowSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			int o = obj.GetRowSize();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			int o = obj.GetColSize();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			string o = obj.GetString(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int o = obj.GetInt(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			uint o = obj.GetUInt(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			float o = obj.GetFloat(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			double o = obj.GetDouble(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.GetBool(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CSVParser obj = (CSVParser)ToLua.CheckObject(L, 1, typeof(CSVParser));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SplitChar(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CSVParser obj = (CSVParser)o;
			char ret = obj.SplitChar;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SplitChar on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SplitChar(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CSVParser obj = (CSVParser)o;
			char arg0 = (char)LuaDLL.luaL_checknumber(L, 2);
			obj.SplitChar = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SplitChar on a nil value" : e.Message);
		}
	}
}

