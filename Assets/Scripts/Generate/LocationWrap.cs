//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LocationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Location), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetLoc", GetLoc);
		L.RegFunction("UpdateLoc", UpdateLoc);
		L.RegFunction("GetLatitude", GetLatitude);
		L.RegFunction("GetLongitude", GetLongitude);
		L.RegFunction("SetGpsAccuracy", SetGpsAccuracy);
		L.RegFunction("SetGpsUpdateDistance", SetGpsUpdateDistance);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLoc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Location obj = (Location)ToLua.CheckObject(L, 1, typeof(Location));
			System.Action<UnityEngine.Vector3> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Vector3>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector3>), func) as System.Action<UnityEngine.Vector3>;
			}

			obj.GetLoc(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateLoc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Location obj = (Location)ToLua.CheckObject(L, 1, typeof(Location));
			System.Action<UnityEngine.Vector3> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Vector3>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector3>), func) as System.Action<UnityEngine.Vector3>;
			}

			obj.UpdateLoc(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLatitude(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Location obj = (Location)ToLua.CheckObject(L, 1, typeof(Location));
			float o = obj.GetLatitude();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLongitude(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Location obj = (Location)ToLua.CheckObject(L, 1, typeof(Location));
			float o = obj.GetLongitude();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGpsAccuracy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Location obj = (Location)ToLua.CheckObject(L, 1, typeof(Location));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetGpsAccuracy(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGpsUpdateDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Location obj = (Location)ToLua.CheckObject(L, 1, typeof(Location));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetGpsUpdateDistance(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

