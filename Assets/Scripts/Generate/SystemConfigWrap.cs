//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SystemConfigWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SystemConfig), typeof(GameData<SystemConfig>));
		L.RegFunction("New", _CreateSystemConfig);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("fileName", get_fileName, null);
		L.RegVar("IsUseAssetBundle", get_IsUseAssetBundle, set_IsUseAssetBundle);
		L.RegVar("IsLuaUseZip", get_IsLuaUseZip, set_IsLuaUseZip);
		L.RegVar("IsEncryptLuaCode", get_IsEncryptLuaCode, set_IsEncryptLuaCode);
		L.RegVar("IsUseLuaBytecode", get_IsUseLuaBytecode, set_IsUseLuaBytecode);
		L.RegVar("IsAutoUpdate", get_IsAutoUpdate, set_IsAutoUpdate);
		L.RegVar("IsEncryptConfigFile", get_IsEncryptConfigFile, set_IsEncryptConfigFile);
		L.RegVar("IsShowLog", get_IsShowLog, set_IsShowLog);
		L.RegVar("CanLoginManual", get_CanLoginManual, set_CanLoginManual);
		L.RegVar("IsOpenHeartBeatCheck", get_IsOpenHeartBeatCheck, set_IsOpenHeartBeatCheck);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystemConfig(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SystemConfig obj = new SystemConfig();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SystemConfig.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fileName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, SystemConfig.fileName);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsUseAssetBundle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool ret = obj.IsUseAssetBundle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsUseAssetBundle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLuaUseZip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool ret = obj.IsLuaUseZip;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsLuaUseZip on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsEncryptLuaCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool ret = obj.IsEncryptLuaCode;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsEncryptLuaCode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsUseLuaBytecode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool ret = obj.IsUseLuaBytecode;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsUseLuaBytecode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAutoUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool ret = obj.IsAutoUpdate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsAutoUpdate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsEncryptConfigFile(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool ret = obj.IsEncryptConfigFile;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsEncryptConfigFile on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsShowLog(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool ret = obj.IsShowLog;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsShowLog on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanLoginManual(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool ret = obj.CanLoginManual;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CanLoginManual on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsOpenHeartBeatCheck(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool ret = obj.IsOpenHeartBeatCheck;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsOpenHeartBeatCheck on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, SystemConfig.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsUseAssetBundle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsUseAssetBundle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsUseAssetBundle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsLuaUseZip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsLuaUseZip = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsLuaUseZip on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsEncryptLuaCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsEncryptLuaCode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsEncryptLuaCode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsUseLuaBytecode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsUseLuaBytecode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsUseLuaBytecode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsAutoUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsAutoUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsAutoUpdate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsEncryptConfigFile(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsEncryptConfigFile = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsEncryptConfigFile on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsShowLog(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsShowLog = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsShowLog on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CanLoginManual(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CanLoginManual = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CanLoginManual on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsOpenHeartBeatCheck(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SystemConfig obj = (SystemConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsOpenHeartBeatCheck = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsOpenHeartBeatCheck on a nil value" : e.Message);
		}
	}
}

