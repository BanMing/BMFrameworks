//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class XMLUtilsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("XMLUtils");
		L.RegFunction("ParseMapIntInt", ParseMapIntInt);
		L.RegFunction("ParseMapIntFloat", ParseMapIntFloat);
		L.RegFunction("ParseMapIntString", ParseMapIntString);
		L.RegFunction("ParseMapStringFloat", ParseMapStringFloat);
		L.RegFunction("ParseMapStringInt", ParseMapStringInt);
		L.RegFunction("ParseMap", ParseMap);
		L.RegFunction("ParseList", ParseList);
		L.RegFunction("GetValue", GetValue);
		L.RegFunction("ParseColor", ParseColor);
		L.RegFunction("ParseVector2", ParseVector2);
		L.RegFunction("ParseVector3", ParseVector3);
		L.RegFunction("ParseVector4", ParseVector4);
		L.RegFunction("ParseRect", ParseRect);
		L.RegFunction("ParseQuaternion", ParseQuaternion);
		L.RegFunction("ReplaceFirst", ReplaceFirst);
		L.RegFunction("CreateMD5", CreateMD5);
		L.RegFunction("FormatMD5", FormatMD5);
		L.RegFunction("BuildFileMd5", BuildFileMd5);
		L.RegFunction("BitSet", BitSet);
		L.RegFunction("BitReset", BitReset);
		L.RegFunction("BitTest", BitTest);
		L.RegFunction("CreateRandom", CreateRandom);
		L.RegFunction("FormatTime", FormatTime);
		L.RegFunction("GetTime", GetTime);
		L.RegFunction("GetUTCTime", GetUTCTime);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseMapIntInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			char arg1 = (char)LuaDLL.luaL_checknumber(L, 2);
			char arg2 = (char)LuaDLL.luaL_checknumber(L, 3);
			System.Collections.Generic.Dictionary<int,int> o = XMLUtils.ParseMapIntInt(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseMapIntFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			char arg1 = (char)LuaDLL.luaL_checknumber(L, 2);
			char arg2 = (char)LuaDLL.luaL_checknumber(L, 3);
			System.Collections.Generic.Dictionary<int,float> o = XMLUtils.ParseMapIntFloat(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseMapIntString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			char arg1 = (char)LuaDLL.luaL_checknumber(L, 2);
			char arg2 = (char)LuaDLL.luaL_checknumber(L, 3);
			System.Collections.Generic.Dictionary<int,string> o = XMLUtils.ParseMapIntString(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseMapStringFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			char arg1 = (char)LuaDLL.luaL_checknumber(L, 2);
			char arg2 = (char)LuaDLL.luaL_checknumber(L, 3);
			System.Collections.Generic.Dictionary<string,float> o = XMLUtils.ParseMapStringFloat(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseMapStringInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			char arg1 = (char)LuaDLL.luaL_checknumber(L, 2);
			char arg2 = (char)LuaDLL.luaL_checknumber(L, 3);
			System.Collections.Generic.Dictionary<string,int> o = XMLUtils.ParseMapStringInt(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			char arg1 = (char)LuaDLL.luaL_checknumber(L, 2);
			char arg2 = (char)LuaDLL.luaL_checknumber(L, 3);
			System.Collections.Generic.Dictionary<string,string> o = XMLUtils.ParseMap(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			char arg1 = (char)LuaDLL.luaL_checknumber(L, 2);
			System.Collections.Generic.List<string> o = XMLUtils.ParseList(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Type arg1 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			object o = XMLUtils.GetValue(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Color arg1;
			bool o = XMLUtils.ParseColor(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseVector2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Vector2 arg1;
			bool o = XMLUtils.ParseVector2(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseVector3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Vector3 arg1;
			bool o = XMLUtils.ParseVector3(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseVector4(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Vector4 arg1;
			bool o = XMLUtils.ParseVector4(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseRect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Rect arg1;
			bool o = XMLUtils.ParseRect(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushValue(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseQuaternion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Quaternion arg1;
			bool o = XMLUtils.ParseQuaternion(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceFirst(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			string o = XMLUtils.ReplaceFirst(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateMD5(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = XMLUtils.CreateMD5(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FormatMD5(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			string o = XMLUtils.FormatMD5(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BuildFileMd5(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = XMLUtils.BuildFileMd5(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BitSet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			ulong o = XMLUtils.BitSet(arg0, arg1);
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BitReset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			ulong o = XMLUtils.BitReset(arg0, arg1);
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BitTest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = XMLUtils.BitTest(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateRandom(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Random o = XMLUtils.CreateRandom();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FormatTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(long)))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				string o = XMLUtils.FormatTime(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.DateTime)))
			{
				System.DateTime arg0 = (System.DateTime)ToLua.ToObject(L, 1);
				string o = XMLUtils.FormatTime(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: XMLUtils.FormatTime");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			System.DateTime o = XMLUtils.GetTime(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUTCTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 1);
			System.DateTime o = XMLUtils.GetUTCTime(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

