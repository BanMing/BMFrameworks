//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class VersionManager2Wrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(VersionManager2), typeof(Singleton<VersionManager2>));
		L.RegFunction("GetLocalVersionInfo", GetLocalVersionInfo);
		L.RegFunction("GetInnerVersionInfo", GetInnerVersionInfo);
		L.RegFunction("CheckInstallationPackageVersionWithLocal", CheckInstallationPackageVersionWithLocal);
		L.RegFunction("CheckLocalVersionInfoWithServer", CheckLocalVersionInfoWithServer);
		L.RegFunction("DownLoadRes", DownLoadRes);
		L.RegFunction("SaveLocalVersionInfo", SaveLocalVersionInfo);
		L.RegFunction("UpdateGame", UpdateGame);
		L.RegFunction("GetServerVersionInfo", GetServerVersionInfo);
		L.RegFunction("DownLoadSingleResItem", DownLoadSingleResItem);
		L.RegFunction("New", _CreateVersionManager2);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("VersionInfoFilePath", get_VersionInfoFilePath, set_VersionInfoFilePath);
		L.RegVar("InnerVersionInfo", get_InnerVersionInfo, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateVersionManager2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				VersionManager2 obj = new VersionManager2();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: VersionManager2.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLocalVersionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VersionManager2 obj = (VersionManager2)ToLua.CheckObject(L, 1, typeof(VersionManager2));
			VersionInfo2 o = obj.GetLocalVersionInfo();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInnerVersionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VersionManager2 obj = (VersionManager2)ToLua.CheckObject(L, 1, typeof(VersionManager2));
			VersionInfo2 o = obj.GetInnerVersionInfo();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckInstallationPackageVersionWithLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VersionManager2 obj = (VersionManager2)ToLua.CheckObject(L, 1, typeof(VersionManager2));
			obj.CheckInstallationPackageVersionWithLocal();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLocalVersionInfoWithServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager2 obj = (VersionManager2)ToLua.CheckObject(L, 1, typeof(VersionManager2));
			System.Action<bool> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<bool>)ToLua.CheckObject(L, 2, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			obj.CheckLocalVersionInfoWithServer(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownLoadRes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			VersionManager2 obj = (VersionManager2)ToLua.CheckObject(L, 1, typeof(VersionManager2));
			System.Collections.Generic.List<ResInfo> arg0 = (System.Collections.Generic.List<ResInfo>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<ResInfo>));
			System.Action<bool> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<bool>)ToLua.CheckObject(L, 3, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			obj.DownLoadRes(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveLocalVersionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager2 obj = (VersionManager2)ToLua.CheckObject(L, 1, typeof(VersionManager2));
			VersionInfo2 arg0 = (VersionInfo2)ToLua.CheckObject(L, 2, typeof(VersionInfo2));
			obj.SaveLocalVersionInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateGame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager2 obj = (VersionManager2)ToLua.CheckObject(L, 1, typeof(VersionManager2));
			System.Action<bool> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<bool>)ToLua.CheckObject(L, 2, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			obj.UpdateGame(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetServerVersionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager2 obj = (VersionManager2)ToLua.CheckObject(L, 1, typeof(VersionManager2));
			System.Action<VersionInfo2> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<VersionInfo2>)ToLua.CheckObject(L, 2, typeof(System.Action<VersionInfo2>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<VersionInfo2>), func) as System.Action<VersionInfo2>;
			}

			obj.GetServerVersionInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownLoadSingleResItem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			VersionManager2 obj = (VersionManager2)ToLua.CheckObject(L, 1, typeof(VersionManager2));
			ResInfo arg0 = (ResInfo)ToLua.CheckObject(L, 2, typeof(ResInfo));
			System.Action<bool> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<bool>)ToLua.CheckObject(L, 3, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			obj.DownLoadSingleResItem(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VersionInfoFilePath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, VersionManager2.VersionInfoFilePath);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InnerVersionInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			VersionManager2 obj = (VersionManager2)o;
			VersionInfo2 ret = obj.InnerVersionInfo;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InnerVersionInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_VersionInfoFilePath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			VersionManager2.VersionInfoFilePath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

