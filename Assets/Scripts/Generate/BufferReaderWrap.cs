//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BufferReaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BufferReader), typeof(System.Object));
		L.RegFunction("Read", Read);
		L.RegFunction("ReadSByte", ReadSByte);
		L.RegFunction("ReadByte", ReadByte);
		L.RegFunction("ReadShort", ReadShort);
		L.RegFunction("ReadUShort", ReadUShort);
		L.RegFunction("ReadInt", ReadInt);
		L.RegFunction("ReadUInt", ReadUInt);
		L.RegFunction("ReadLong", ReadLong);
		L.RegFunction("ReadULong", ReadULong);
		L.RegFunction("ReadFloat", ReadFloat);
		L.RegFunction("ReadDouble", ReadDouble);
		L.RegFunction("ReadBytes", ReadBytes);
		L.RegFunction("ReadUnicodeString", ReadUnicodeString);
		L.RegFunction("ReadString", ReadString);
		L.RegFunction("ReadBool", ReadBool);
		L.RegFunction("Create", Create);
		L.RegFunction("New", _CreateBufferReader);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Stream", get_Stream, null);
		L.RegVar("Length", get_Length, null);
		L.RegVar("Position", get_Position, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateBufferReader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				BufferReader obj = new BufferReader(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(int), typeof(int), typeof(string)))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				BufferReader obj = new BufferReader(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: BufferReader.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(ulong)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				ulong arg0 = LuaDLL.tolua_touint64(L, 2);
				obj.Read(ref arg0);
				LuaDLL.tolua_pushuint64(L, arg0);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(long)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				obj.Read(ref arg0);
				LuaDLL.tolua_pushint64(L, arg0);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(float)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
				obj.Read(ref arg0);
				LuaDLL.lua_pushnumber(L, arg0);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(bool)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				obj.Read(ref arg0);
				LuaDLL.lua_pushboolean(L, arg0);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(double)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				obj.Read(ref arg0);
				LuaDLL.lua_pushnumber(L, arg0);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(uint)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				uint arg0 = (uint)LuaDLL.lua_tonumber(L, 2);
				obj.Read(ref arg0);
				LuaDLL.lua_pushnumber(L, arg0);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(byte)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				byte arg0 = (byte)LuaDLL.lua_tonumber(L, 2);
				obj.Read(ref arg0);
				LuaDLL.lua_pushnumber(L, arg0);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(sbyte)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				sbyte arg0 = (sbyte)LuaDLL.lua_tonumber(L, 2);
				obj.Read(ref arg0);
				LuaDLL.lua_pushnumber(L, arg0);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(short)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				short arg0 = (short)LuaDLL.lua_tonumber(L, 2);
				obj.Read(ref arg0);
				LuaDLL.lua_pushnumber(L, arg0);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(int)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.Read(ref arg0);
				LuaDLL.lua_pushinteger(L, arg0);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(BufferReader), typeof(ushort)))
			{
				BufferReader obj = (BufferReader)ToLua.ToObject(L, 1);
				ushort arg0 = (ushort)LuaDLL.lua_tonumber(L, 2);
				obj.Read(ref arg0);
				LuaDLL.lua_pushnumber(L, arg0);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BufferReader.Read");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			sbyte o = obj.ReadSByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			byte o = obj.ReadByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			short o = obj.ReadShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			ushort o = obj.ReadUShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			int o = obj.ReadInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			uint o = obj.ReadUInt();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			long o = obj.ReadLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadULong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			ulong o = obj.ReadULong();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			float o = obj.ReadFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte[] o = obj.ReadBytes(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUnicodeString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.ReadUnicodeString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.ReadString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BufferReader obj = (BufferReader)ToLua.CheckObject(L, 1, typeof(BufferReader));
			bool o = obj.ReadBool();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			BufferReader o = BufferReader.Create(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Stream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BufferReader obj = (BufferReader)o;
			System.IO.MemoryStream ret = obj.Stream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Stream on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BufferReader obj = (BufferReader)o;
			int ret = obj.Length;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Length on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BufferReader obj = (BufferReader)o;
			int ret = obj.Position;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Position on a nil value" : e.Message);
		}
	}
}

