//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIAnimationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIAnimation), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Play", Play);
		L.RegFunction("RegistMovieEvent", RegistMovieEvent);
		L.RegFunction("UnregistMovieEvent", UnregistMovieEvent);
		L.RegFunction("PlayOnce", PlayOnce);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("movieName", get_movieName, set_movieName);
		L.RegVar("lSprites", get_lSprites, set_lSprites);
		L.RegVar("fSep", get_fSep, set_fSep);
		L.RegVar("isLoop", get_isLoop, set_isLoop);
		L.RegVar("showerWidth", get_showerWidth, null);
		L.RegVar("showerHeight", get_showerHeight, null);
		L.RegVar("FrameCount", get_FrameCount, null);
		L.RegFunction("delegateMovieEvent", UIAnimation_delegateMovieEvent);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIAnimation obj = (UIAnimation)ToLua.CheckObject(L, 1, typeof(UIAnimation));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Play(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegistMovieEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIAnimation obj = (UIAnimation)ToLua.CheckObject(L, 1, typeof(UIAnimation));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UIAnimation.delegateMovieEvent arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (UIAnimation.delegateMovieEvent)ToLua.CheckObject(L, 3, typeof(UIAnimation.delegateMovieEvent));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(UIAnimation.delegateMovieEvent), func) as UIAnimation.delegateMovieEvent;
			}

			obj.RegistMovieEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnregistMovieEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIAnimation obj = (UIAnimation)ToLua.CheckObject(L, 1, typeof(UIAnimation));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UIAnimation.delegateMovieEvent arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (UIAnimation.delegateMovieEvent)ToLua.CheckObject(L, 3, typeof(UIAnimation.delegateMovieEvent));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(UIAnimation.delegateMovieEvent), func) as UIAnimation.delegateMovieEvent;
			}

			obj.UnregistMovieEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayOnce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIAnimation obj = (UIAnimation)ToLua.CheckObject(L, 1, typeof(UIAnimation));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.PlayOnce(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_movieName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			string ret = obj.movieName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index movieName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lSprites(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			System.Collections.Generic.List<UnityEngine.Sprite> ret = obj.lSprites;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lSprites on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fSep(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			float ret = obj.fSep;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fSep on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isLoop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			bool ret = obj.isLoop;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isLoop on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showerWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			float ret = obj.showerWidth;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showerWidth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showerHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			float ret = obj.showerHeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showerHeight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FrameCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			int ret = obj.FrameCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FrameCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_movieName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.movieName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index movieName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lSprites(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			System.Collections.Generic.List<UnityEngine.Sprite> arg0 = (System.Collections.Generic.List<UnityEngine.Sprite>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Sprite>));
			obj.lSprites = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lSprites on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fSep(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.fSep = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fSep on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isLoop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAnimation obj = (UIAnimation)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isLoop = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isLoop on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UIAnimation_delegateMovieEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UIAnimation.delegateMovieEvent), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UIAnimation.delegateMovieEvent), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

