//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LoginServerConfigWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LoginServerConfig), typeof(GameData<LoginServerConfig>));
		L.RegFunction("GetLoginServerConfig", GetLoginServerConfig);
		L.RegFunction("New", _CreateLoginServerConfig);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ip", get_ip, null);
		L.RegVar("port", get_port, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLoginServerConfig(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LoginServerConfig obj = new LoginServerConfig();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LoginServerConfig.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLoginServerConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action<string,int> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<string,int>)ToLua.CheckObject(L, 1, typeof(System.Action<string,int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<string,int>), func) as System.Action<string,int>;
			}

			LoginServerConfig.GetLoginServerConfig(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LoginServerConfig obj = (LoginServerConfig)o;
			string ret = obj.ip;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ip on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LoginServerConfig obj = (LoginServerConfig)o;
			int ret = obj.port;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index port on a nil value" : e.Message);
		}
	}
}

