//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MyFileUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MyFileUtil), typeof(System.Object));
		L.RegFunction("ReadFileBytes", ReadFileBytes);
		L.RegFunction("ReadFileText", ReadFileText);
		L.RegFunction("WriteFile", WriteFile);
		L.RegFunction("ReadConfigData", ReadConfigData);
		L.RegFunction("ReadConfigDataInCacheDir", ReadConfigDataInCacheDir);
		L.RegFunction("ReadNotEncryptionConfigDataInStreamingAssets", ReadNotEncryptionConfigDataInStreamingAssets);
		L.RegFunction("ReadConfigDataInStreamingAssets", ReadConfigDataInStreamingAssets);
		L.RegFunction("ReadConfigDataInStreamingAssetsImp", ReadConfigDataInStreamingAssetsImp);
		L.RegFunction("WriteConfigDataInStreamingAssets", WriteConfigDataInStreamingAssets);
		L.RegFunction("WriteUnEncryptConfigDataInStreamingAssets", WriteUnEncryptConfigDataInStreamingAssets);
		L.RegFunction("WriteConfigDataInCacheDir", WriteConfigDataInCacheDir);
		L.RegFunction("EncryptData", EncryptData);
		L.RegFunction("DecryptData", DecryptData);
		L.RegFunction("CopyFile", CopyFile);
		L.RegFunction("CopyFileAndRename", CopyFileAndRename);
		L.RegFunction("CopyDir", CopyDir);
		L.RegFunction("GetFileList", GetFileList);
		L.RegFunction("GetFileListWithWildcard", GetFileListWithWildcard);
		L.RegFunction("GetRelativeFileList", GetRelativeFileList);
		L.RegFunction("GetRelativeFileListWithSpecialFileType", GetRelativeFileListWithSpecialFileType);
		L.RegFunction("CreateDir", CreateDir);
		L.RegFunction("DeleteDir", DeleteDir);
		L.RegFunction("GetParentDir", GetParentDir);
		L.RegFunction("GetFullPath", GetFullPath);
		L.RegFunction("DeleteFile", DeleteFile);
		L.RegFunction("DealFilePathSlash", DealFilePathSlash);
		L.RegFunction("GetFileNameWithoutExtension", GetFileNameWithoutExtension);
		L.RegFunction("GetFileSize", GetFileSize);
		L.RegFunction("IsFileExsit", IsFileExsit);
		L.RegFunction("GetValueFromXmlString", GetValueFromXmlString);
		L.RegFunction("ReadFromXml", ReadFromXml);
		L.RegFunction("New", _CreateMyFileUtil);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("EncryptKey", get_EncryptKey, set_EncryptKey);
		L.RegVar("EncryptXMLFileSuffix", get_EncryptXMLFileSuffix, set_EncryptXMLFileSuffix);
		L.RegVar("CacheDir", get_CacheDir, null);
		L.RegVar("SDCardDir", get_SDCardDir, null);
		L.RegVar("InnerConfigDir", get_InnerConfigDir, null);
		L.RegVar("OuterConfigDir", get_OuterConfigDir, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMyFileUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MyFileUtil obj = new MyFileUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MyFileUtil.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFileBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			byte[] o = MyFileUtil.ReadFileBytes(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFileText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			string o = MyFileUtil.ReadFileText(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(string), typeof(bool)))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				MyFileUtil.WriteFile(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(byte[]), typeof(bool)))
			{
				string arg0 = ToLua.ToString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				MyFileUtil.WriteFile(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MyFileUtil.WriteFile");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadConfigData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = MyFileUtil.ReadConfigData(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadConfigDataInCacheDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = MyFileUtil.ReadConfigDataInCacheDir(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadNotEncryptionConfigDataInStreamingAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = MyFileUtil.ReadNotEncryptionConfigDataInStreamingAssets(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadConfigDataInStreamingAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = MyFileUtil.ReadConfigDataInStreamingAssets(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadConfigDataInStreamingAssetsImp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] o = MyFileUtil.ReadConfigDataInStreamingAssetsImp(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteConfigDataInStreamingAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MyFileUtil.WriteConfigDataInStreamingAssets(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUnEncryptConfigDataInStreamingAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MyFileUtil.WriteUnEncryptConfigDataInStreamingAssets(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteConfigDataInCacheDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MyFileUtil.WriteConfigDataInCacheDir(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncryptData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = MyFileUtil.EncryptData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecryptData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = MyFileUtil.DecryptData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MyFileUtil.CopyFile(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyFileAndRename(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			MyFileUtil.CopyFileAndRename(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			MyFileUtil.CopyDir(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileList(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Collections.Generic.List<string>), typeof(System.Collections.Generic.List<string>), typeof(System.Collections.Generic.List<string>)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Collections.Generic.List<string> arg1 = (System.Collections.Generic.List<string>)ToLua.ToObject(L, 2);
				System.Collections.Generic.List<string> arg2 = (System.Collections.Generic.List<string>)ToLua.ToObject(L, 3);
				System.Collections.Generic.List<string> arg3 = (System.Collections.Generic.List<string>)ToLua.ToObject(L, 4);
				MyFileUtil.GetFileList(arg0, ref arg1, arg2, arg3);
				ToLua.PushObject(L, arg1);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo), typeof(System.Collections.Generic.List<string>), typeof(System.Collections.Generic.List<string>), typeof(System.Collections.Generic.List<string>)))
			{
				System.IO.DirectoryInfo arg0 = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				System.Collections.Generic.List<string> arg1 = (System.Collections.Generic.List<string>)ToLua.ToObject(L, 2);
				System.Collections.Generic.List<string> arg2 = (System.Collections.Generic.List<string>)ToLua.ToObject(L, 3);
				System.Collections.Generic.List<string> arg3 = (System.Collections.Generic.List<string>)ToLua.ToObject(L, 4);
				MyFileUtil.GetFileList(arg0, ref arg1, arg2, arg3);
				ToLua.PushObject(L, arg1);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Collections.Generic.List<string>), typeof(string), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Collections.Generic.List<string> arg1 = (System.Collections.Generic.List<string>)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				MyFileUtil.GetFileList(arg0, ref arg1, arg2, arg3);
				ToLua.PushObject(L, arg1);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Collections.Generic.List<string>), typeof(string[]), typeof(string[])))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Collections.Generic.List<string> arg1 = (System.Collections.Generic.List<string>)ToLua.ToObject(L, 2);
				string[] arg2 = ToLua.CheckStringArray(L, 3);
				string[] arg3 = ToLua.CheckStringArray(L, 4);
				MyFileUtil.GetFileList(arg0, ref arg1, arg2, arg3);
				ToLua.PushObject(L, arg1);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MyFileUtil.GetFileList");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileListWithWildcard(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			System.Collections.Generic.List<string> arg1 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			System.Collections.Generic.List<string> arg2 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<string>));
			System.Collections.Generic.List<string> arg3 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 4, typeof(System.Collections.Generic.List<string>));
			MyFileUtil.GetFileListWithWildcard(arg0, ref arg1, arg2, arg3);
			ToLua.PushObject(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRelativeFileList(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Collections.Generic.List<FileUnit>), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Collections.Generic.List<FileUnit> arg1 = (System.Collections.Generic.List<FileUnit>)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				MyFileUtil.GetRelativeFileList(arg0, ref arg1, arg2);
				ToLua.PushObject(L, arg1);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(string), typeof(System.Collections.Generic.List<FileUnit>), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Collections.Generic.List<FileUnit> arg2 = (System.Collections.Generic.List<FileUnit>)ToLua.ToObject(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				MyFileUtil.GetRelativeFileList(arg0, arg1, ref arg2, arg3);
				ToLua.PushObject(L, arg2);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(string), typeof(System.Collections.Generic.List<FileUnit>), typeof(MyFileUtil.FileSearchMode), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Collections.Generic.List<FileUnit> arg2 = (System.Collections.Generic.List<FileUnit>)ToLua.ToObject(L, 3);
				MyFileUtil.FileSearchMode arg3 = (MyFileUtil.FileSearchMode)ToLua.ToObject(L, 4);
				string arg4 = ToLua.ToString(L, 5);
				MyFileUtil.GetRelativeFileList(arg0, arg1, ref arg2, arg3, arg4);
				ToLua.PushObject(L, arg2);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MyFileUtil.GetRelativeFileList");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRelativeFileListWithSpecialFileType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.Collections.Generic.List<FileUnit> arg2 = (System.Collections.Generic.List<FileUnit>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<FileUnit>));
			string arg3 = ToLua.CheckString(L, 4);
			MyFileUtil.GetRelativeFileListWithSpecialFileType(arg0, arg1, ref arg2, arg3);
			ToLua.PushObject(L, arg2);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			MyFileUtil.CreateDir(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			MyFileUtil.DeleteDir(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetParentDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = MyFileUtil.GetParentDir(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFullPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = MyFileUtil.GetFullPath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			MyFileUtil.DeleteFile(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DealFilePathSlash(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = MyFileUtil.DealFilePathSlash(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileNameWithoutExtension(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = MyFileUtil.GetFileNameWithoutExtension(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			long o = MyFileUtil.GetFileSize(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsFileExsit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			bool o = MyFileUtil.IsFileExsit(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValueFromXmlString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string o = MyFileUtil.GetValueFromXmlString(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFromXml(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XElement arg0 = (System.Xml.Linq.XElement)ToLua.CheckObject(L, 1, typeof(System.Xml.Linq.XElement));
			string arg1 = ToLua.CheckString(L, 2);
			string o = MyFileUtil.ReadFromXml(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EncryptKey(IntPtr L)
	{
		try
		{
			ToLua.Push(L, MyFileUtil.EncryptKey);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EncryptXMLFileSuffix(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, MyFileUtil.EncryptXMLFileSuffix);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CacheDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, MyFileUtil.CacheDir);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SDCardDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, MyFileUtil.SDCardDir);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InnerConfigDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, MyFileUtil.InnerConfigDir);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OuterConfigDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, MyFileUtil.OuterConfigDir);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EncryptKey(IntPtr L)
	{
		try
		{
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			MyFileUtil.EncryptKey = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EncryptXMLFileSuffix(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			MyFileUtil.EncryptXMLFileSuffix = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

