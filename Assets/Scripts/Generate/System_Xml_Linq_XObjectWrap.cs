//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Xml_Linq_XObjectWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Xml.Linq.XObject), typeof(System.Object));
		L.RegFunction("AddAnnotation", AddAnnotation);
		L.RegFunction("Annotation", Annotation);
		L.RegFunction("Annotations", Annotations);
		L.RegFunction("RemoveAnnotations", RemoveAnnotations);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("BaseUri", get_BaseUri, null);
		L.RegVar("Document", get_Document, null);
		L.RegVar("NodeType", get_NodeType, null);
		L.RegVar("Parent", get_Parent, null);
		L.RegVar("Changing", get_Changing, set_Changing);
		L.RegVar("Changed", get_Changed, set_Changed);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAnnotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XObject obj = (System.Xml.Linq.XObject)ToLua.CheckObject(L, 1, typeof(System.Xml.Linq.XObject));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.AddAnnotation(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Annotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XObject obj = (System.Xml.Linq.XObject)ToLua.CheckObject(L, 1, typeof(System.Xml.Linq.XObject));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			object o = obj.Annotation(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Annotations(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XObject obj = (System.Xml.Linq.XObject)ToLua.CheckObject(L, 1, typeof(System.Xml.Linq.XObject));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			System.Collections.Generic.IEnumerable<object> o = obj.Annotations(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAnnotations(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Xml.Linq.XObject obj = (System.Xml.Linq.XObject)ToLua.CheckObject(L, 1, typeof(System.Xml.Linq.XObject));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			obj.RemoveAnnotations(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BaseUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XObject obj = (System.Xml.Linq.XObject)o;
			string ret = obj.BaseUri;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BaseUri on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Document(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XObject obj = (System.Xml.Linq.XObject)o;
			System.Xml.Linq.XDocument ret = obj.Document;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Document on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NodeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XObject obj = (System.Xml.Linq.XObject)o;
			System.Xml.XmlNodeType ret = obj.NodeType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NodeType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Parent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Xml.Linq.XObject obj = (System.Xml.Linq.XObject)o;
			System.Xml.Linq.XElement ret = obj.Parent;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Parent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Changing(IntPtr L)
	{
		ToLua.Push(L, new EventObject("System.Xml.Linq.XObject.Changing"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Changed(IntPtr L)
	{
		ToLua.Push(L, new EventObject("System.Xml.Linq.XObject.Changed"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Changing(IntPtr L)
	{
		try
		{
			System.Xml.Linq.XObject obj = (System.Xml.Linq.XObject)ToLua.CheckObject(L, 1, typeof(System.Xml.Linq.XObject));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'System.Xml.Linq.XObject.Changing' can only appear on the left hand side of += or -= when used outside of the type 'System.Xml.Linq.XObject'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs> ev = (System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>)DelegateFactory.CreateDelegate(typeof(System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>), arg0.func);
				obj.Changing += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs> ev = (System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>)LuaMisc.GetEventHandler(obj, typeof(System.Xml.Linq.XObject), "Changing");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.Changing -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Changed(IntPtr L)
	{
		try
		{
			System.Xml.Linq.XObject obj = (System.Xml.Linq.XObject)ToLua.CheckObject(L, 1, typeof(System.Xml.Linq.XObject));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'System.Xml.Linq.XObject.Changed' can only appear on the left hand side of += or -= when used outside of the type 'System.Xml.Linq.XObject'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs> ev = (System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>)DelegateFactory.CreateDelegate(typeof(System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>), arg0.func);
				obj.Changed += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs> ev = (System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>)LuaMisc.GetEventHandler(obj, typeof(System.Xml.Linq.XObject), "Changed");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.Changed -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

