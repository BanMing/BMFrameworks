//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MemoryOutputStreamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MemoryOutputStream), typeof(System.Object));
		L.RegFunction("PushByteArray", PushByteArray);
		L.RegFunction("GetBuffer", GetBuffer);
		L.RegFunction("GetUsedBufferSize", GetUsedBufferSize);
		L.RegFunction("Clear", Clear);
		L.RegFunction("New", _CreateMemoryOutputStream);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMemoryOutputStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				MemoryOutputStream obj = new MemoryOutputStream(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(int)))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				MemoryOutputStream obj = new MemoryOutputStream(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MemoryOutputStream.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PushByteArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MemoryOutputStream obj = (MemoryOutputStream)ToLua.CheckObject(L, 1, typeof(MemoryOutputStream));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.PushByteArray(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MemoryOutputStream obj = (MemoryOutputStream)ToLua.CheckObject(L, 1, typeof(MemoryOutputStream));
			byte[] o = obj.GetBuffer();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUsedBufferSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MemoryOutputStream obj = (MemoryOutputStream)ToLua.CheckObject(L, 1, typeof(MemoryOutputStream));
			int o = obj.GetUsedBufferSize();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MemoryOutputStream obj = (MemoryOutputStream)ToLua.CheckObject(L, 1, typeof(MemoryOutputStream));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

