//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameData_LoginServerConfigWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameData<LoginServerConfig>), typeof(GameData), "GameData_LoginServerConfig");
		L.RegFunction("Load", Load);
		L.RegFunction("LoadFromText", LoadFromText);
		L.RegFunction("Reload", Reload);
		L.RegFunction("ParseDataFromFile", ParseDataFromFile);
		L.RegFunction("ParseDataFromText", ParseDataFromText);
		L.RegFunction("GetValue", GetValue);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("dataMap", get_dataMap, set_dataMap);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			GameData<LoginServerConfig>.Load(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFromText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			GameData<LoginServerConfig>.LoadFromText(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameData<LoginServerConfig>.Reload();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseDataFromFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			System.Collections.Generic.Dictionary<int,LoginServerConfig> o = GameData<LoginServerConfig>.ParseDataFromFile(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseDataFromText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.Collections.Generic.Dictionary<int,LoginServerConfig> o = GameData<LoginServerConfig>.ParseDataFromText(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			LoginServerConfig o = GameData<LoginServerConfig>.GetValue(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dataMap(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, GameData<LoginServerConfig>.dataMap);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dataMap(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<int,LoginServerConfig> arg0 = (System.Collections.Generic.Dictionary<int,LoginServerConfig>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,LoginServerConfig>));
			GameData<LoginServerConfig>.dataMap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

