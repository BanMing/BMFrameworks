//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LocalDataVWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LocalDataV), typeof(System.Object));
		L.RegFunction("Save", Save);
		L.RegFunction("IsContainKey", IsContainKey);
		L.RegFunction("SetValue", SetValue);
		L.RegFunction("GetValue", GetValue);
		L.RegFunction("GetValueInt", GetValueInt);
		L.RegFunction("GetValueUInt", GetValueUInt);
		L.RegFunction("GetValueFloat", GetValueFloat);
		L.RegFunction("GetValueDouble", GetValueDouble);
		L.RegFunction("GetValueBool", GetValueBool);
		L.RegFunction("SetRoleValue", SetRoleValue);
		L.RegFunction("GetRoleValue", GetRoleValue);
		L.RegFunction("GetRoleValueInt", GetRoleValueInt);
		L.RegFunction("GetRoleValueUInt", GetRoleValueUInt);
		L.RegFunction("GetRoleValueFloat", GetRoleValueFloat);
		L.RegFunction("GetRoleValueDouble", GetRoleValueDouble);
		L.RegFunction("GetRoleValueBool", GetRoleValueBool);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Save(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			obj.Save(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsContainKey(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LocalDataV), typeof(string)))
			{
				LocalDataV obj = (LocalDataV)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.IsContainKey(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LocalDataV), typeof(string), typeof(string)))
			{
				LocalDataV obj = (LocalDataV)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool o = obj.IsContainKey(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LocalDataV.IsContainKey");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			obj.SetValue(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string o = obj.GetValue(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValueInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int o = obj.GetValueInt(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValueUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			uint o = obj.GetValueUInt(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValueFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			float o = obj.GetValueFloat(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValueDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			double o = obj.GetValueDouble(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValueBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.GetValueBool(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			obj.SetRoleValue(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRoleValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string o = obj.GetRoleValue(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRoleValueInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int o = obj.GetRoleValueInt(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRoleValueUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			uint o = obj.GetRoleValueUInt(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRoleValueFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			float o = obj.GetRoleValueFloat(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRoleValueDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			double o = obj.GetRoleValueDouble(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRoleValueBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LocalDataV obj = (LocalDataV)ToLua.CheckObject(L, 1, typeof(LocalDataV));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.GetRoleValueBool(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, LocalDataV.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

